callout srandom;
callout random;
callout printf;

// Finds the longest palindrome in an array of integers.

int Arr[9];
int max_len;
int palindrome;

// Because decaf doesn't have exponents
int power(int base, int exponent) {
	if (exponent == 0) {
		return 1;
	}
	if (exponent == 1) {
		return base;
	}
	return base * power(base, exponent-1);
}

// Slice the array at the indices (inclusive) and return as a single integer
int slice_array(int start_index, int end_index) {
	int i, power_of_ten, palindrome;
	palindrome = 0;
	i = start_index;
	power_of_ten = end_index - start_index;
	while (i <= end_index) {
		palindrome += Arr[i] * power(10, power_of_ten);
                // printf("%d^%d = %d\n", 10, power_of_ten, power(10, power_of_ten));
		power_of_ten -= 1;
		i += 1;
	}
	return palindrome;
}

// Given an index or a pair of neighboring indices, 
// find the longest palindrome centered there.
void expand_from_center(int index_l, int index_r, int n) {
	int len;
	while ((index_l >= 0) && (index_r < n) && 
		(Arr[index_l] == Arr[index_r])) {
		index_l -= 1;
		index_r += 1;
	}
	index_l += 1;
	index_r -= 1;
	len = index_r - index_l + 1;
	if (len > 0 && len > max_len) {
		max_len = len;
                // printf("left: %d, right: %d\n", index_l, index_r);
		palindrome = slice_array(index_l, index_r);
	}
}

// Expand for each of the 2N-1 centers and finds the longest palindrome
int find_longest_palindrome(int len) {
	int i;
	for (i = 0, len) {
		// expand from center number (odd cases)
		expand_from_center(i, i, len);
                // printf("%d, odd, %d, %d\n", i, max_len, palindrome);

		// expand from middle two numbers (even cases)
		expand_from_center(i, i+1, len);
                // printf("%d, even, %d, %d\n", i, max_len, palindrome);
	}
	// for base case of len=1
	expand_from_center(len-1, len-1, len);
}


// Initialize array with random integers and returns the input as an int
int initialize_array(int n) {
	int input, i, temp;
	input = 0;
	for (i = 0, n) {
		// printf("i=%d, n=%d\n", i, n);
		temp = -1;
		while (temp < 0):100 {
			srandom(17);
			temp = random();
		}
		// printf("RANDOM INTEGER: %d\n", temp);
		Arr[i] = temp;
		input += temp * power(10, n-i-1);
	}
	return input;
}

void main() {
	int n;
	n = 9;

	// deterministic input: 10101010101. Should output the same number.
	Arr[0] = 1;
	Arr[1] = 0;
	Arr[2] = 1;
	Arr[3] = 0;
	Arr[4] = 1;
	Arr[5] = 0;
	Arr[6] = 1;
	Arr[7] = 0;
	Arr[8] = 1;

	// initialize_array(n); // for random inputs

void convert_input(int input, int len) {
	// convert integer to array of digits; store to Arr.
	int remaining, digit, index;
	index = len-1;
	remaining = input;
	while (remaining > 0) {
		digit = remaining % 10;
		remaining = remaining / 10;
		Arr[index] = digit;
		index -= 1;
	}
}

void main() {
	int n, input;
        boolean randomize;
	n = 9;
        randomize = false;
	input = 124542169; //101010101;
        
        if (!randomize) { 
		// deterministic input
		convert_input(input, n);
        } else {
		input = initialize_array(n); // for random inputs
        }
	max_len = 0;
	find_longest_palindrome(n);

        printf("Input: %d\n", input);
	printf("The longest palindrome found was of length %d: %d.\n", max_len, palindrome);
}

